Digital Accessibility at Princeton Off screen link: Skip to content Off screen link: Skip to search Main Menu Menu About Submenu People Initiatives Policies & Guidelines Submenu Web Video and Audio Social Media Events IT Procurement Email Quality Assurance Submenu Testing & Consultations Website Quality Assurance Tools Training Submenu Classes Certifications Submenu Certificant Resources Meetups & Channels Certificants How To... Submenu Create Accessible Content Submenu Images of Text Alternative Text Color Contrast Headings Lists Tables Layout Tables Meaningful Links Identify Languages Color Alone Sensory Characteristics PDF Documents Design Accessibly Develop Accessibly Test For Accessibility News Accommodations Get Help Search Search Section Menu Create Accessible Content Design Accessibly Develop Accessibly Test For Accessibility Test For Accessibility Note that we teach and encourage familiarity with screen readers, but do not recommend departments do their own screen reader testing. Effective and comprehensive screen reader testing requires multiple devices, a lot of training and a lot of practice. Please request a consultation before launch. Testing Content Look over your content with the 11 Key Accessibility Factors in mind. Clear, succinct, well organized content is the first step towards an accessible site. Check your menus, links and headers for clarity. If you have not yet tested these on a real user, consider stopping by the Usability Lab. Break up long blocks of text in to smaller chunks or lists. Watch for text in images. Make sure your videos have closed captions. Give tables, forms, charts and graphs a close look for effective labeling. Make sure they work well on phones, and make sure they do not rely on color alone to communicate any important concepts. Check your content again on a phone. Make sure images, tables and forms scale down to the small screens nicely. Run a simple automated test. Two free tools we recommend for content authors: WebAIM's WAVE tool will highlight errors inline in your content, with plain-language explanations of what it thinks is wrong and how you might fix it. It also makes invisible elements visible (image alt elements, heading structure, etc), so you can see how screen readers interpret the page. Install the browser plugin if you want to test content that requires a login to access. Deque's AXE tool works similarly but is much less visual, listing what it finds in a separate frame, next to the page. Some users love Wave's bright and colorful inline icons, others prefer this more linear approach. Testing Design & Code In addition to the above, check the "structure" tab in WAVE. Do the headings form a logical outline, including visually hidden headings for critical non-content elements like the main navigation and search? Are there landmarks for key regions like the banner, navigation(s), main content and footer? Check the "contrast" tab in WAVE. Be sure to manually check colors the tool won't detect: text on top of image backgrounds, hover and focus states on links and buttons, tooltips or validation errors in forms, color choices in charts and graphs, etc. Check your responsive design. Make sure the theme reflows cleanly down to 320px widths without horizontal scrolling (as much as possible) and up to 2560px widths without blurry images or extremely long line lengths. Make sure the menu and any other interactive components can be used via touch on a phone. Make sure users can pinch-to-zoom on a phone ("user-scalable" should never be disabled). Either install Microsoft Accessibility Insights and run a full assessment, or do manual keyboard testing: Make sure your browser is configured to enable full keyboard access, and then use the Tab key to advance through the page. Make sure you have a "skip to main" link -- and that clicking it transfers focus to the content area. Every element should clearly change on focus. You should never have to squint and try to figure out where your cursor went. As you Tab, you should be able to reach every link, button and form item, and you should be able to Shift+Tab back through them in reverse. Make sure it works in both directions if elements show and hide on scroll. The order that items are highlighted when tabbing should match the order you read them -- left to right, top to bottom. Exceptions should be rare and logical (e.g., it might make sense for the "close" button in an alert to come after its content, even if it is at the top right). Any custom interactive components like dropdowns, modals and slideshows should also respond to expected key commands, possibly including arrow keys, spacebar, enter and/or esc. If a button causes a modal to appear, focus should be moved into it, and be returned to the button when it closes. And focus should be "trapped" in the modal until the modal is closed, so that the cursor doesn't end up hidden beneath the modal with no way back into it. Request a consultation with us so we can finish your DIY testing on our collection of screen readers. Footer Accessibility Â© 2022 The Trustees of Princeton University